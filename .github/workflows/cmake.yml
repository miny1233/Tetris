name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
    - name: Build c++ project
  # You may pin to the exact commit or the version.
  # uses: nicledomaS/cmake_build_action@0b1ee7f06969385fd8b3177d64db29456867ada0
  uses: nicledomaS/cmake_build_action@v1.4
  with:
    # Git submodule update
    submodule_update: # optional, default is OFF
    # Cmake args (example -D<ARG1>=value;-D<ARG1>=value)
    cmake_args: # optional, default is 
    # Run unit tests
    run_tests: # optional, default is OFF
    # Cmake arg for turn build unit test (if need)
    unit_test_build: # optional, default is 
    # Create package
    create_package: # optional, default is OFF
    # Package generator
    package_generator: # optional, default is TGZ
    # For multi-configuration tools, choose configuration <Release or Debug>
    config: # optional, default is Release
      

      
